datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Course {
  id          String  @id @default(uuid())
  userID      String
  title       String  @db.Text
  description String? @db.Text
  imageURL    String? @db.Text
  isPublished Boolean @default(false)

  categoryID String?
  category   Category? @relation(fields: [categoryID], references: [id])

  chapters    Chapter[]
  attachments Attachment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryID])
}

model Book {
  id          String  @id @default(uuid())
  title       String  @db.Text
  description String? @db.Text
  imageURL    String? @db.Text
  price       Float?

  categoryID String?
  category   Category?  @relation(fields: [categoryID], references: [id])
  Purchase   Purchase[]

  @@index([categoryID])
}

model Category {
  id      String   @id @default(uuid())
  name    String   @unique
  courses Course[]
  books   Book[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Attachment {
  id   String @id @default(uuid())
  name String
  url  String @db.Text

  courseID String
  course   Course @relation(fields: [courseID], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseID])
}

model Chapter {
  id          String  @id @default(uuid())
  title       String
  description String? @db.Text
  videoUrl    String? @db.Text
  position    Int
  isPublished Boolean @default(false)

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress UserProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}


model UserProgress {
  id     String @id @default(uuid())
  userId String

  chapterId String
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, chapterId])
  @@index([chapterId])
}

model Purchase {
  id     String @id @default(uuid())
  userId String

  bookID String
  book   Book   @relation(fields: [bookID], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@unique([userId, bookID])
  @@index([bookID])
}

model StripeCustomer {
  id               String @id @default(uuid())
  userId           String @unique
  stripeCustomerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
