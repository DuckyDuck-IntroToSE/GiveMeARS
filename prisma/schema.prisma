generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Course {
  id                  String  @id @default(uuid())
  userID              String
  title               String  @db.Text
  shortDescription    String? @db.Text @map("description")
  requirements        String? @db.Text
  detailedDescription String? @db.Text
  targetAudience      String? @db.Text

  imageURL    String?      @db.Text
  isPublished Boolean      @default(false)
  categoryID  String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  category    Category?    @relation(fields: [categoryID], references: [id])
  chapters    Chapter[]
  attachments Attachment[]
  enrollments Enrollment[]

  @@index([categoryID])
  @@fulltext([title])
}

model Book {
  id          String     @id @default(uuid())
  title       String     @db.Text
  description String?    @db.Text
  imageURL    String?    @db.Text
  price       Float?
  categoryID  String?
  category    Category?  @relation(fields: [categoryID], references: [id])
  Purchase    Purchase[]

  @@index([categoryID])
}

model Category {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  courses   Course[]
  books     Book[]
}

model Attachment {
  id        String   @id @default(uuid())
  name      String
  url       String   @db.Text
  courseID  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  course    Course   @relation(fields: [courseID], references: [id], onDelete: Cascade)

  @@index([courseID])
}

model Chapter {
  id           String         @id @default(uuid())
  title        String
  description  String?        @db.Text
  videoUrl     String?        @db.Text
  position     Int
  isPublished  Boolean        @default(false)
  courseId     String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  course       Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  userProgress UserProgress[]

  @@index([courseId])
}

model UserProgress {
  id          String   @id @default(uuid())
  userId      String
  chapterId   String
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  chapter     Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  @@unique([userId, chapterId])
  @@index([chapterId])
}

model Purchase {
  id        String   @id @default(uuid())
  userId    String
  bookID    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  book      Book     @relation(fields: [bookID], references: [id], onDelete: Cascade)

  @@unique([userId, bookID])
  @@index([bookID])
}

model Enrollment {
  id     String @id @default(uuid())
  userId String

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@unique([userId, courseId])
  @@index([courseId])
}

model StripeCustomer {
  id               String   @id @default(uuid())
  userId           String   @unique
  stripeCustomerId String   @unique
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}
